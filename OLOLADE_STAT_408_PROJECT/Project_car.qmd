---
title: "Ololade Akinsanola Project"
format: 
  html:
    self-contained: true
    embed-resources: true
editor: visual
execute: 
  echo: true
  include: true
---

## Project: Car Price Prediction

### Load Data set and libraries

```{r}
library(tidyverse)
library(broom)
library(car)
cars<- read.csv("Data/CarPrice.csv")

```

### Data Cleaning, Processing and Future Engineering

```{r}
# 1. Data Cleaning and Preprocessing
## Clean numeric columns
cars <- cars %>%
  mutate(
    Mileage = as.numeric(gsub(" km", "", Mileage)),  # Remove ' km' and convert to numeric
    Levy = as.numeric(gsub("-", NA, Levy)),         # Replace "-" with NA
    Engine.volume = as.numeric(gsub(" Turbo", "", Engine.volume))  # Remove ' Turbo'
  )

# Clean the Doors column
cars$Doors <- cars$Doors %>%
  sub("-.*", "", .) %>%
  ifelse(. == "<5", "4", .) %>% 
  as.numeric()   

## Convert relevant columns to numeric
cars <- cars %>%
  mutate(
    Price = as.numeric(Price),
    Airbags = as.numeric(Airbags),
    Cylinders = as.numeric(Cylinders)
  )

# 2. Standardizing Categorical Variables
## Standardize Wheel column
cars <- cars %>%
  mutate(
    Wheel = case_when(
      Wheel == "Right-hand drive" ~ "Right", 
      Wheel == "Left wheel" ~ "Left",  # Ensure correct term is used
      TRUE ~ Wheel
    ),
    ## Standardize Color column
    Color = case_when(
      Color == "Carnelian red" ~ "Red",
      Color == "Sky blue" ~ "Blue"),
    ## Standardize Drive.wheels column
    Drive.wheels = case_when(
      Drive.wheels == "4x4" ~ "AWD",  # Correct for "4x4" to "AWD"
      Drive.wheels == "Front" ~ "FWD",
      Drive.wheels == "Rear" ~ "RWD",
      TRUE ~ Drive.wheels  # Keep original value for unmatched cases
    )
  )

# 3. Handle Missing Values
## Impute missing numeric columns with median
cars <- cars %>%
  mutate(
    Price = ifelse(is.na(Price), median(Price, na.rm = TRUE), Price),
    Levy = ifelse(is.na(Levy), median(Levy, na.rm = TRUE), Levy)
  )

## Impute missing categorical columns with mode
mode_value <- function(x) names(sort(table(x), decreasing = TRUE))[1]
cars <- cars %>%
  mutate(
    Manufacturer = ifelse(is.na(Manufacturer), mode_value(Manufacturer), Manufacturer),
    Model = ifelse(is.na(Model), mode_value(Model), Model)
  )

# 4. Feature Engineering
cars <- cars %>%
  mutate(Age = 2024 - Prod..year)

outliers <- function(cars, iqr = 1.5, exclude_cols = c("Cylinders", "Doors")) {
  numeric_cols <- sapply(cars, is.numeric)
  cars_numeric <- cars[, numeric_cols]
  
  # Exclude specific columns
cars_numeric <- cars_numeric[, !(names(cars_numeric) %in% exclude_cols)]
  
  # Loop over each numeric column to cap outliers
  for (col in names(cars_numeric)) {
    Q1 <- quantile(cars_numeric[[col]], 0.25, na.rm = TRUE)
    Q3 <- quantile(cars_numeric[[col]], 0.75, na.rm = TRUE)
    IQR <- Q3 - Q1
    
    lower_bound <- Q1 - iqr * IQR
    upper_bound <- Q3 + iqr * IQR
    
    # Cap the outliers
    cars_numeric[[col]] <- pmin(pmax(cars_numeric[[col]], lower_bound), upper_bound)
  }
  
  cars[, names(cars_numeric)] <- cars_numeric
  return(cars)
}

cars <- outliers(cars, iqr = 1.5, exclude_cols = c("Cylinders", "Doors"))


# 5. Recode and Group Categorical Variables
## Reorganize Color
cars$Color <- dplyr::case_when(
  cars$Color %in% c("White", "Silver", "Grey", "Beige") ~ "Light",  
  cars$Color %in% c("Black", "Brown") ~ "Dark",                  
  cars$Color %in% c("Red", "Orange", "Yellow", "Golden") ~ "Warm",  
  cars$Color %in% c("Blue", "Green", "Purple", "Pink") ~ "Cool",  
  TRUE ~ "Other"  
)

## Reorganize Fuel.type
cars$Fuel.type <- dplyr::case_when(
  cars$Fuel.type %in% c("Hybrid", "Plug-in Hybrid") ~ "Hybrid",
  cars$Fuel.type %in% c("Petrol", "Diesel", "LPG") ~ "Conventional",
  cars$Fuel.type %in% c("CNG", "Hydrogen") ~ "Other",
  TRUE ~ cars$Fuel.type  # Leave other fuel types unchanged
)

## Reorganize Gear box
cars$Gear.box.type <- dplyr::case_when(
  cars$Gear.box.type %in% c("Tiptronic", "Variator") ~ "Automatic",
  TRUE ~ cars$Gear.box.type  # Leave other gear box types unchanged
)

## Reorganize Airbags (Apply limits, then categorize)
# First, ensure 'Airbags' is numeric and within the desired range
cars$Airbags <- ifelse(cars$Airbags >= 2 & cars$Airbags <= 12, cars$Airbags, NA)  # Ensure Airbags are in range

## Reorganize Category
cars$Category <- case_when(
  cars$Category %in% c("Jeep", "Pickup", "Microbus") ~ "Utility",
  cars$Category %in% c("Hatchback", "Sedan", "Universal", "Minivan") ~ "Passenger",
  cars$Category %in% c("Cabriolet", "Coupe", "Limousine") ~ "Luxurious",
  cars$Category == "Goods wagon" ~ "Commercial",
  TRUE ~ "Other"
)

# 6. Convert Columns to Factors
categorical_columns <- c("Leather.interior", "Fuel.type", "Drive.wheels", 
                         "Wheel", "Gear.box.type", "Color", "Category", "Model")
cars[categorical_columns] <- lapply(cars[categorical_columns], as.factor)

# 7. Apply Limits to Numeric Variables
cars <- cars %>%
  filter(
    Price >= 5000 & Price <= 85000,
    Levy >= 100 & Levy <= 6000,
    Engine.volume >= 1.0 & Engine.volume <= 7.0,
    Mileage >= 0 & Mileage <= 300000,
    Cylinders >= 3 & Cylinders <= 12,
    Airbags >= 2 & Airbags <= 12,  # Now works because Airbags is numeric
    Age >= 2 & Age <= 12
  )

# 8. Remove Unnecessary Columns and data
cars <- cars[, !names(cars) %in% c("ID", "Prod..year", "Model")]

unwanted_manufacturers <- c("VAZ", "GAZ", "UAZ", "ZAZ", "SCION", "MERCURY","OPEL", "FIAT","PORSCHE",
                            "LANCIA", "MOSKVICH", "MASERATI", "FERRARI", "SAAB", "ALFA ROMEO","SUZUKI",
                            "LAMBORGHINI", "ROLLS-ROYCE", "PONTIAC", "SATURN", "CITROEN","ISUZU", "სხვა",
                            "ASTON MARTIN", "GREATWALL", "HUMMER", "RENAULT", "LINCOLN", "JAGUAR", "SUBARU",
                            "SSANGYONG", "DAEWOO", "PEUGEOT", "BUICK", "DAIHATSU", "SEAT", "ROVER", "MITSUBISHI",
                            "CADILLAC", "MINI", "LAND ROVER","MAZDA", "SKODA", "CHRYSLER", "ACURA", "DODGE","AUDI","HAVAL", "GMC", "INFINITI")  # List of manufacturers to exclude
cars <- cars[!cars$Manufacturer %in% unwanted_manufacturers, ]

# 9. Final Checks
cars <- na.omit(cars)
# Identify duplicate rows
duplicates <- duplicated(cars)

# View duplicate rows
duplicate_rows <- cars[duplicates, ]
# View(duplicate_rows)

# Remove duplicates
cars <- cars[!duplicated(cars), ]

# Check the structure of the cleaned data
str(cars)

unique(cars$Manufacturer)

```

### Data Sampling

```{r}
# Data sampling using Stratified Sampling
cars_red <- cars %>%
  group_by(Fuel.type) %>%
  sample_n(size = round(1200 * n() / nrow(cars)))

str(cars_red)


```

### Summary Statistics

```{r}
# Summary of population data (actual dataset "cars")
summary(cars)

# Histograms, boxplots, and bar charts for the population
ggplot(cars, aes(x = Price)) +
  geom_histogram(binwidth = 1000, fill = "blue", alpha = 0.7) +
  geom_density(color = "red", size = 1) +
  labs(title = "Distribution of Car Prices for Population Data", x = "Price", y = "Frequency")

ggplot(cars, aes(x = Category, y = Engine.volume)) +
  geom_boxplot(fill = "lightblue") +
  labs(title = "Engine Volume by Category for Population Data", x = "Category", y = "Engine Volume") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(cars, aes(x = Category)) +
  geom_bar(fill = "steelblue") +
  geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) +
  labs(title = "Distribution of Car Categories for Population Data", x = "Category", y = "Count")

```

```{r}
# Summary of sample data ("cars_red")
summary(cars_red)

# Histograms, boxplots, and bar charts for the sample
ggplot(cars_red, aes(x = Price)) +
  geom_histogram(binwidth = 1000, fill = "blue", alpha = 0.7) +
  geom_density(color = "red", size = 1) +
  labs(title = "Distribution of Car Prices for Sample Data", x = "Price", y = "Frequency")

ggplot(cars_red, aes(x = Category, y = Engine.volume)) +
  geom_boxplot(fill = "lightblue") +
  labs(title = "Engine Volume by Category for Sample Data", x = "Category", y = "Engine Volume") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(cars_red, aes(x = Category)) +
  geom_bar(fill = "steelblue") +
  geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) +
  labs(title = "Distribution of Car Categories for Sample Data", x = "Category", y = "Count")

```

```{r}
library(psych)

# Descriptive statistics for a subset of variables
describe(cars_red[, c("Price", "Mileage", "Engine.volume", "Age")])
```

```{r}
library(e1071)

# Skewness and Kurtosis
skewness(cars_red$Price)
kurtosis(cars_red$Price)

#skewness
ggplot(cars_red, aes(x = Price)) +
  geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
  geom_density(color = "red", size = 1) +
  labs(title = "Distribution of Car Prices", x = "Price", y = "Density")

```

```{r}
# Population vs Sample data Comparison
ggplot() +
  geom_density(data = cars, aes(x = Price, color = "Population"), size = 1) +
  geom_density(data = cars_red, aes(x = Price, color = "Sample"), size = 1) +
  scale_color_manual(values = c("Population" = "blue", "Sample" = "green")) +
  labs(title = "Price Distribution: Population vs Sample", x = "Price", y = "Density")

```

### Visualization

```{r}
## 1. Price Distribution
library(ggplot2)

# Histogram with density
ggplot(cars_red, aes(x = Price)) +
  geom_histogram(binwidth = 1000, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_density(aes(y = ..density..), color = "red", size = 1) +
  labs(title = "Distribution of Car Prices", x = "Price (in currency)", y = "Frequency/Density") +
  theme_minimal()

## 2. Price vs Fuel Type
# Violin Plot for Price vs Fuel Type
ggplot(cars_red, aes(x = Fuel.type, y = Price, fill = Fuel.type)) +
  geom_violin() +
  labs(title = "Price vs Fuel Type", x = "Fuel Type", y = "Price") +
  theme_minimal()

## 3. Price vs Mileage
# Create Mileage Bins
cars_red$mileage_bin <- cut(cars_red$Mileage, breaks = seq(0, max(cars_red$Mileage), by = 10000), labels = FALSE)
avg_price_by_mileage <- cars_red %>%
  group_by(mileage_bin) %>%
  summarise(avg_price = mean(Price, na.rm = TRUE), avg_mileage = mean(Mileage, na.rm = TRUE))

# Line Plot for Price vs Mileage
ggplot(avg_price_by_mileage, aes(x = avg_mileage, y = avg_price)) +
  geom_line(color = "blue", linewidth = 1) +  
  geom_point(color = "red", size = 2) +
  geom_smooth(method = "loess", se = FALSE, color = "green", linetype = "dashed") +
  labs(title = "Price vs. Mileage", x = "Average Mileage (in km)", y = "Average Price") +
  theme_minimal()

## 4. Engine Volume Category vs Price
# Create Engine Volume Categories
engine_volume_category <- cut(cars_red$Engine.volume, breaks = c(0, 1.5, 2.5, 3.5, 5, Inf), 
                              labels = c("Small", "Medium", "Large", "Very Large", "X-Large"))

# Bar Plot for Engine Volume Category vs Price
ggplot(cars_red, aes(x = engine_volume_category, y = Price)) +
  stat_summary(fun = mean, geom = "bar", fill = "red") +
  labs(title = "Average Price by Engine Volume Category", x = "Engine Volume Category", y = "Average Price") +
  theme_minimal()

## 5. Gearbox Type Distribution
ggplot(cars_red, aes(x = Gear.box.type, fill = Gear.box.type)) +
  geom_bar(position = "dodge") +
  geom_text(stat = 'count', aes(label = ..count..), position = position_dodge(0.9), vjust = -0.3) +
  labs(title = "Gearbox Type Distribution", x = "Gearbox Type", y = "Count") +
  theme_minimal()

## 7. Fuel Type Distribution
ggplot(cars_red, aes(x = Fuel.type, fill = Fuel.type)) +
  geom_bar() +
  labs(title = "Fuel Type Distribution", x = "Fuel Type", y = "Count") +
  theme_minimal()

## 8. Price by Cylinders
# Boxplot for Price by Cylinders
ggplot(cars_red, aes(x = factor(Cylinders), y = Price, fill = factor(Cylinders))) +
  geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.3, aes(color = factor(Cylinders))) +
  labs(title = "Price by Number of Cylinders", x = "Cylinders", y = "Price") +
  theme_minimal()

# Bar Plot with average price per cylinder
ggplot(cars_red, aes(x = factor(Cylinders), y = Price)) +
  stat_summary(fun = mean, geom = "bar", fill = "skyblue", color = "black") +
  labs(title = "Average Price vs Number of Cylinders", x = "Cylinders", y = "Average Price") +
  theme_minimal()

## 9. Price vs Car Age
car_age_category <- cut(cars_red$Age, breaks = c(0, 5, 10, 15, 20, Inf), 
                        labels = c("New", "Fairly Used", "Used", "Old",  "V-Old"))

# Bar plot for Average Price by Age Category
ggplot(cars_red, aes(x = car_age_category, y = Price)) +
  stat_summary(fun = mean, geom = "bar", fill = "darkgreen") +
  labs(title = "Average Price by Age Category", x = "Age Category", y = "Average Price") +
  theme_minimal()

## 10. Price vs Category (Violin Plot)
ggplot(cars_red, aes(x = Category, y = Price, fill = Category)) +
  geom_violin() +
  labs(title = "Price vs Category", x = "Category", y = "Price") +
  theme_minimal()

## 11. Histogram of Levy
hist(cars_red$Levy, main = "Histogram of Levy", xlab = "Levy", col = "lightgreen", breaks = 20)
lines(density(cars_red$Levy), col = "red", lwd = 2)

## 12. Price vs Engine Volume (with trend line)
ggplot(cars_red, aes(x = Engine.volume, y = Price)) +
  geom_point(color = "blue", alpha = 0.5) +
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  labs(title = "Price vs Engine Volume with Trend Line", x = "Engine Volume (L)", y = "Price") +
  theme_minimal()
```

#### Data Visualization 2:

```{r}
# This is to check whether to add a polynomial term and check for linearity 
ggplot(data = cars_red, aes(x= Mileage, y=Price)) + geom_point() + geom_smooth(method = lm)
ggplot(data = cars_red, aes(x= Engine.volume, y=Price)) + geom_point() + geom_smooth(method = lm)
ggplot(data = cars_red, aes(x= Cylinders, y=Price)) + geom_point() + geom_smooth(method = lm)
ggplot(data = cars_red, aes(x= Age, y=Price)) + geom_point() + geom_smooth(method = lm)

```

### Model building: Regression Analysis

#### Linear Regression

```{r}
cars_red <- na.omit(cars_red)
cars_red <- cars_red[, !names(cars_red) %in% "mileage_bin"]
mod <- lm(Price ~ ., data=cars_red)
summary(mod)
```

##### Log Transformation of Price and Polynomial

```{r}
mod_log <- lm(log(Price) ~ . + I(Mileage^2) + I(Engine.volume^2), data=cars_red)
summary(mod_log)
```

##### Interaction Terms

```{r}
cars_reduced <- cars_red[, !colnames(cars_red) %in% c("Wheel", "Color","Levy")]

mod_int <- lm(log(Price) ~ .*. + I(Mileage^2) + I(Engine.volume^2) , data=cars_reduced)
summary(mod_int)

# Get the tidy output
tidy_mod <- tidy(mod_int)

# Filter for significant terms
significant_terms <- tidy_mod %>%
  filter(p.value <= 0.05)  # Keep terms with p-value <= 0.05

# View the significant terms
View(significant_terms)


```

```{r}
plot(mod_int,1)
plot(mod_int,2)
library(lmtest)
library(zoo)
bptest(mod_int)
ks.test(residuals(mod_int), "pnorm", sd=summary(mod_int)$s)

```

#### Variable Selection and Maximum Model

```{r}
# Fit the maximum model
max_model <- lm(log(Price) ~ I(Engine.volume^2) + Age + I(Mileage^2) + Fuel.type + Airbags+ Category + Manufacturer + Drive.wheels + Gear.box.type + Manufacturer:Category + Manufacturer:Drive.wheels + Fuel.type:Engine.volume + Category:Drive.wheels + Manufacturer:Gear.box.type + Manufacturer:Fuel.type + Mileage:Age + Engine.volume:Age + Drive.wheels:Fuel.type, data = cars_reduced)

# Calculate AIC
aic_value <- AIC(max_model)

# Calculate BIC
bic_value <- BIC(max_model)

# Mallow's C_p
# Mallow's C_p is available through extractAIC function
cp_value <- extractAIC(max_model, k = 2)

# Print the values
cat("AIC:", aic_value, "\n")
cat("BIC:", bic_value, "\n")
cat("Mallow's C_p:", cp_value, "\n")
```

##### LASSO

```{r}
# Convert categorical variables into dummy variables
x <- model.matrix(log(Price) ~ .*.- 1, data = cars_reduced)
y <- log(cars_reduced$Price)  # Response variable

# Fit the LASSO model
lasso_model <- cv.glmnet(x, y, alpha = 1)  # Alpha = 1 for LASSO
coef(lasso_model, s = "lambda.min")  # Selects non-zero coefficients

library(glmnet)

# Convert coefficients to a data frame
lasso_coefs <- as.data.frame(as.matrix(coef(lasso_model, s = "lambda.min")))
colnames(lasso_coefs) <- "Coefficient"
lasso_coefs$Variable <- rownames(lasso_coefs)

# Remove duplicates
lasso_coefs <- lasso_coefs[!duplicated(lasso_coefs$Variable), ]

# Remove dots and replace with spaces in variable names
lasso_coefs$Variable <- gsub("\\.", " ", lasso_coefs$Variable)

# Filter for non-zero coefficients
non_zero_coefs <- lasso_coefs[lasso_coefs$Coefficient != 0, ]

# Sort coefficients by magnitude (optional)
non_zero_coefs <- non_zero_coefs[order(abs(non_zero_coefs$Coefficient), decreasing = TRUE), ]

# Reset rownames for a clean display
rownames(non_zero_coefs) <- NULL

# View the cleaned and filtered coefficients
print(non_zero_coefs)


View(non_zero_coefs)
```

##### Final regression model

```{r}
final_model <- lm(log(Price) ~ Age + Mileage + I(Engine.volume^2) + Fuel.type + Airbags +
                    Category + Manufacturer + Drive.wheels + Gear.box.type +
                    Fuel.type:Engine.volume + Manufacturer:Category + Age:Mileage +
                    Engine.volume:Age + Manufacturer:Drive.wheels + Manufacturer:Gear.box.type,
                    data = cars_reduced)

# Summarize the model
summary(final_model)

tidy_model <- tidy(final_model)

# Filter for significant terms
significant_terms_final <- tidy_model %>%
  filter(p.value <= 0.05)  # Keep terms with p-value <= 0.05

# View the significant terms
View(significant_terms_final)

```

### Multicollinearity check

```{r}
alias(final_mod)
vif(final_mod, type="predictor")
```

### Homoscedasticity and Normality Assumptions check

```{r}
plot(final_mod,1)
plot(final_mod,2)
library(lmtest)
library(zoo)
bptest(final_mod)
ks.test(residuals(final_mod), "pnorm", sd=summary(final_mod)$s)

```

```{r}
mod_glm <- glm(log(Price) ~., family = gaussian(link = "log"), data = cars_reduced)
summary(mod_glm)

plot(mod_glm,1)
plot(mod_glm,2)
library(lmtest)
library(zoo)
bptest(mod_glm)
#ks.test(residuals(mod_glm), "pnorm", sd=summary(mod_glm)$s)

mod_glm_int <- glm(log(Price) ~.*., family = gaussian(link = "log"), data = cars_reduced)
summary(mod_glm_int)
```

```{r}
mod_fin <- glm(log(Price) ~ Age + Mileage + I(Engine.volume^2) + Fuel.type + Airbags +
                    Category + Manufacturer + Drive.wheels + Gear.box.type +
                    Fuel.type:Engine.volume + Manufacturer:Category + Age:Mileage +
                    Engine.volume:Age + Manufacturer:Drive.wheels + Manufacturer:Gear.box.type,
                    data = cars_reduced)
 summary(mod_fin)

```

```{r}
AIC(mod_fin)
BIC(mod_fin)

deviance_model <- deviance(mod_fin)

# Null Deviance
null_deviance <- mod_fin$null.deviance

# Pseudo-R-squared
pseudo_r2 <- 1 - (deviance_model / null_deviance)
pseudo_r2
```

### Hypothesis testing

```{r}
summary(mod_fin)
anova(mod_fin)
```

![]()
